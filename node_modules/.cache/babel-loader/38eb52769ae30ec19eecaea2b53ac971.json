{"ast":null,"code":"import _toConsumableArray from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/src/App.js\";\nimport React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\nimport './app.css';\nimport { tokenUrl, instanceLocator } from './config';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    };\n    _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.subscribeToRoom = _this.subscribeToRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getRooms = _this.getRooms.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createRoom = _this.createRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var tokenProvider = new Chatkit.TokenProvider({\n        url: tokenUrl\n      });\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: instanceLocator,\n        userId: 'jfrank77',\n        tokenProvider: tokenProvider\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this2.currentUser = currentUser;\n\n        _this2.getRooms();\n      }).catch(function (err) {\n        return console.log('got an error connecting: ', err);\n      });\n    }\n  }, {\n    key: \"getRooms\",\n    value: function getRooms() {\n      var _this3 = this;\n\n      this.currentUser.getJoinableRooms().then(function (joinableRooms) {\n        _this3.setState({\n          joinableRooms: joinableRooms,\n          joinedRooms: _this3.currentUser.rooms\n        });\n      }).catch(function (err) {\n        return console.log('got an error with the rooms: ', err);\n      });\n    }\n  }, {\n    key: \"subscribeToRoom\",\n    value: function subscribeToRoom(roomId) {\n      var _this4 = this;\n\n      this.setState({\n        messages: []\n      });\n      this.currentUser.subscribeToRoom({\n        roomId: roomId,\n        hooks: {\n          onNewMessage: function onNewMessage(message) {\n            _this4.setState({\n              messages: _toConsumableArray(_this4.state.messages).concat([message])\n            });\n          }\n        }\n      }).then(function (room) {\n        _this4.setState({\n          roomId: room.id\n        });\n\n        _this4.getRooms();\n      }).catch(function (err) {\n        return console.log('got an error subscribing to the room: ', err);\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(text) {\n      this.currentUser.sendMessage({\n        text: text,\n        roomId: this.state.roomId\n      });\n    }\n  }, {\n    key: \"createRoom\",\n    value: function createRoom(roomName) {\n      var _this5 = this;\n\n      this.currentUser.createRoom({\n        name: roomName\n      }).then(function (room) {\n        return _this5.subscribeToRoom(room.id);\n      }).catch(function (err) {\n        return console.log('got an error creating the room: ', err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(RoomList, {\n        roomId: this.state.roomId,\n        subscribeToRoom: this.subscribeToRoom,\n        rooms: _toConsumableArray(this.state.joinableRooms).concat(_toConsumableArray(this.state.joinedRooms)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        roomId: this.state.roomId,\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(SendMessageForm, {\n        disabled: !this.state.roomId,\n        sendMessage: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(NewRoomForm, {\n        createRoom: this.createRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/jf.gonzalez/Downloads/React-chat-app/src/App.js"],"names":["React","Chatkit","MessageList","SendMessageForm","RoomList","NewRoomForm","tokenUrl","instanceLocator","App","props","state","roomId","messages","joinableRooms","joinedRooms","sendMessage","bind","subscribeToRoom","getRooms","createRoom","tokenProvider","TokenProvider","url","chatManager","ChatManager","userId","connect","then","currentUser","catch","err","console","log","getJoinableRooms","setState","rooms","hooks","onNewMessage","message","room","id","text","roomName","name","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Chatkit from '@pusher/chatkit-client';\r\nimport MessageList from './components/MessageList';\r\nimport SendMessageForm from './components/SendMessageForm';\r\nimport RoomList from './components/RoomList';\r\nimport NewRoomForm from './components/NewRoomForm';\r\nimport './app.css';\r\n\r\nimport { tokenUrl, instanceLocator } from './config';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      roomId: null,\r\n      messages: [],\r\n      joinableRooms: [],\r\n      joinedRooms: [],\r\n    };\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\r\n    this.getRooms = this.getRooms.bind(this);\r\n    this.createRoom = this.createRoom.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const tokenProvider = new Chatkit.TokenProvider({\r\n      url: tokenUrl,\r\n    });\r\n\r\n    const chatManager = new Chatkit.ChatManager({\r\n      instanceLocator: instanceLocator,\r\n      userId: 'jfrank77',\r\n      tokenProvider: tokenProvider,\r\n    });\r\n\r\n    chatManager\r\n      .connect()\r\n      .then(currentUser => {\r\n        this.currentUser = currentUser;\r\n        this.getRooms();\r\n      })\r\n      .catch(err => console.log('got an error connecting: ', err));\r\n  }\r\n\r\n  getRooms() {\r\n    this.currentUser\r\n      .getJoinableRooms()\r\n      .then(joinableRooms => {\r\n        this.setState({\r\n          joinableRooms,\r\n          joinedRooms: this.currentUser.rooms,\r\n        });\r\n      })\r\n      .catch(err => console.log('got an error with the rooms: ', err));\r\n  }\r\n\r\n  subscribeToRoom(roomId) {\r\n    this.setState({ messages: [] });\r\n    this.currentUser\r\n      .subscribeToRoom({\r\n        roomId: roomId,\r\n        hooks: {\r\n          onNewMessage: message => {\r\n            this.setState({\r\n              messages: [...this.state.messages, message],\r\n            });\r\n          },\r\n        },\r\n      })\r\n      .then(room => {\r\n        this.setState({\r\n          roomId: room.id,\r\n        });\r\n        this.getRooms();\r\n      })\r\n      .catch(err => console.log('got an error subscribing to the room: ', err));\r\n  }\r\n\r\n  sendMessage(text) {\r\n    this.currentUser.sendMessage({\r\n      text,\r\n      roomId: this.state.roomId,\r\n    });\r\n  }\r\n\r\n  createRoom(roomName) {\r\n    this.currentUser\r\n      .createRoom({\r\n        name: roomName,\r\n      })\r\n      .then(room => this.subscribeToRoom(room.id))\r\n      .catch(err => console.log('got an error creating the room: ', err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <RoomList\r\n          roomId={this.state.roomId}\r\n          subscribeToRoom={this.subscribeToRoom}\r\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\r\n        />\r\n        <MessageList\r\n          roomId={this.state.roomId}\r\n          messages={this.state.messages}\r\n        />\r\n        <SendMessageForm\r\n          disabled={!this.state.roomId}\r\n          sendMessage={this.sendMessage}\r\n        />\r\n        <NewRoomForm createRoom={this.createRoom} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}